from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from src.dispatcher.callback_datas import EnrollmentCallback
from src.dispatcher.messages.course_details import course_details
from src.services.api import api_service

router = Router()


@router.callback_query(EnrollmentCallback.filter())
async def handle_course_enrollment(callback_query: CallbackQuery, callback_data: EnrollmentCallback):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –∫—É—Ä—Å–∞ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç course_enroll).
    :param callback_query: CallbackQuery –æ–±—ä–µ–∫—Ç –æ—Ç Telegram.
    :param callback_data: –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π callback_data, —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏ (course_id –∏ course_enroll).
    """
    course_id = callback_data.course_id  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫—É—Ä—Å–∞
    course_enroll = callback_data.course_enroll  # –ë—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –∑–∞–ø–∏—Å–∞—Ç—å (True) –∏–ª–∏ –æ—Ç–ø–∏—Å–∞—Ç—å (False)
    telegram_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await api_service.check_user(telegram_id=telegram_id)

    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await callback_query.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
        return

    if course_enroll:  # –ï—Å–ª–∏ True - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –∫—É—Ä—Å
        success = await api_service.enroll_course(course_id=course_id, user_id=user.id)
        if success:
            await callback_query.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å üéâ")
        else:
            await callback_query.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:  # –ï—Å–ª–∏ False - –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø–∏—Å–∫—É –æ—Ç –∫—É—Ä—Å–∞
        success = await api_service.cancel_enrollment(course_id=course_id, user_id=user.id)
        if success:
            await callback_query.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫—É—Ä—Å–∞!")
        else:
            await callback_query.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫—É—Ä—Å–∞.", show_alert=True)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
    course = await api_service.get_course(course_id=course_id)
    if not course:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
        await callback_query.message.edit_text("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.", parse_mode="HTML")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π callback_data —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏
    updated_callback_data = EnrollmentCallback(course_enroll=not course_enroll, course_id=course.id).pack()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ (–ª–∏–±–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –ª–∏–±–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" if not course_enroll else "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
                    callback_data=updated_callback_data,
                )
            ]
        ]
    )

    if course.cover_url:
        # –ï—Å–ª–∏ —É –∫—É—Ä—Å–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await callback_query.message.edit_caption(
            caption=await course_details(course), reply_markup=keyboard, parse_mode="HTML"
        )
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç
        await callback_query.message.edit_text(
            text=await course_details(course), reply_markup=keyboard, parse_mode="HTML"
        )
