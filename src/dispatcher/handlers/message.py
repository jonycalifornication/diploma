from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from pydantic import ValidationError

from src.dispatcher.callback_datas import EnrollmentCallback, InstructorCallback, BookCallback, DownloadCallback, \
    CourseQuestionCallback, ChapterCallback
from src.dispatcher.keyboards.keyboard import search_keyboard
from src.dispatcher.messages.course_details import course_details, instructor_details, book_details
from src.dispatcher.states.registration import RegistrationForm
from src.services.api import api_service
from src.services.schemas.schemas import UserCreate

router = Router()


@router.message(RegistrationForm.full_name, F.text)
async def process_fullname(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text.strip())
    await message.answer("üìß –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:")
    await state.set_state(RegistrationForm.email)


@router.message(RegistrationForm.email, F.text)
async def process_email(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    full_name = user_data["full_name"]
    email = message.text.strip()

    try:
        user_create = UserCreate(
            telegram_id=message.from_user.id,
            full_name=full_name,
            email=email,  # –ó–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞ EmailStr (pydantic –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        )
    except ValidationError:
        await message.answer("‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return  # –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (RegistrationForm.email)

    # –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    result = await api_service.create_user(user_create)

    if not result:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        await state.clear()
    else:
        await message.answer("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=await search_keyboard(initial=True))
        await state.clear()


@router.message()
async def handle_course_by_id(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –∫—É—Ä—Å –ø–æ ID.
    –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: course_<course_id>
    """
    telegram_id = message.from_user.id
    user = await api_service.check_user(telegram_id)
    if not user:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        await state.set_state(RegistrationForm.full_name)
        return

    if message.text.startswith("course_"):
        await message.delete()
        course_id = message.text.split("_", 1)[1]
        course = await api_service.get_course(course_id=course_id)
        if not course:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤", switch_inline_query_current_chat="")]]
            )
            await message.answer("–ö—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–µ
        details = await course_details(course)
        enroll_button = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="ü§î –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=CourseQuestionCallback(course_id=course_id).pack()
                    ),
                    InlineKeyboardButton(
                        text="ü§î –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—É—Ä—Å–∞",
                        callback_data=ChapterCallback(course_id=course_id).pack(),
                    )
                ]
            ]
        )
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–∏–±–æ —Ç–µ–∫—Å—Ç, –ª–∏–±–æ —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ
        if course.cover_url:
            await message.answer_photo(
                photo=course.cover_url,  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞
                caption=details,
                reply_markup=enroll_button,
                parse_mode="HTML",
            )
        else:
            await message.answer(text=details, reply_markup=enroll_button, parse_mode="HTML")
        return
    if message.text.startswith("instructor_"):
        await message.delete()
        instructor_id = message.text.split("_", 1)[1]
        instructor = await api_service.get_instructor(instructor_id=instructor_id)
        if not instructor:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", switch_inline_query_current_chat="-i ")]
                ]
            )
            await message.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
        details = await instructor_details(instructor)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="–ö—É—Ä—Å—ã",
                    callback_data=InstructorCallback(
                        instructor_id=instructor.id).pack())
                ]
            ]
        )
        await message.answer_photo(
            photo=instructor.profile_picture_url,  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞
            caption=details,
            reply_markup=keyboard,
            parse_mode="HTML",
        )
    if message.text.startswith("book_"):
        await message.delete()
        book_id = message.text.split("_", 1)[1]
        book = await api_service.get_book(book_id=book_id)
        if not book:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –∫–Ω–∏–≥", switch_inline_query_current_chat="-b ")]
                ]
            )
            await message.answer("–ö–Ω–∏–≥–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
        details = await book_details(book)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —á—Ç–µ–Ω–∏—é",
                        url=book.book_link  # –≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ
                    ),
                    InlineKeyboardButton(
                        text="üì• –°–∫–∞—á–∞—Ç—å –∫–Ω–∏–≥—É",
                        callback_data=DownloadCallback(book_id=book.id).pack()
                    )
                ]
            ]
        )
        await message.answer_photo(
            photo=book.image_url,  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞
            caption=details,
            reply_markup=keyboard,
            parse_mode="HTML",
        )
