from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from src.dispatcher.callback_datas import CourseCallback, CourseQuestionCallback, EnrollmentCallback, ChapterCallback, \
    InstructorCallback
from src.dispatcher.keyboards.keyboard import search_keyboard
from src.dispatcher.messages.course_details import course_details
from src.services.api import api_service
from src.services.gemini import gemini_client

from ..states.gemini import CourseRequest

router = Router()


@router.callback_query(F.data == "my_courses")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å CallbackQuery.data -> F.data
async def my_courses_callback(query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∫—É—Ä—Å—ã'."""
    await send_courses(query.message, query.from_user.id)
    await query.answer()


@router.message(Command("my_courses"))
async def my_courses_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_courses."""
    await send_courses(message, message.from_user.id)


async def send_courses(destination: types.Message | types.CallbackQuery, telegram_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –≤–∏–¥–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""
    user = await api_service.check_user(telegram_id=telegram_id)
    if not user:
        await destination.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        return

    if not user.course:
        await destination.answer(
            text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤. –ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫—É—Ä—Å—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
            reply_markup=await search_keyboard(initial=True),
        )
    else:
        button_rows = [
            [InlineKeyboardButton(text=f"üìö {course.title}", callback_data=CourseCallback(course_id=course.id).pack())]
            for course in user.course
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=button_rows)

        await destination.answer(
            text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫—É—Ä—Å–æ–≤. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫—É—Ä—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=keyboard
        )


@router.callback_query(CourseCallback.filter())
async def course_info(callback_query: types.CallbackQuery, callback_data: CourseCallback):
    course_id = callback_data.course_id  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫—É—Ä—Å–∞
    course = await api_service.get_course(course_id=course_id)

    if not course:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ", show_alert=True)
        return

    unsubscribe_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="ü§î –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=CourseQuestionCallback(course_id=course_id).pack()
                ),
                InlineKeyboardButton(
                    text="ü§î –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—É—Ä—Å–∞",
                    callback_data=ChapterCallback(course_id=course_id).pack(),
                )
            ]
        ]
    )
    if course.cover_url:
        await callback_query.message.reply_photo(
            photo=course.cover_url,  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            caption=await course_details(course),  # –¢–µ–∫—Å—Ç –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            reply_markup=unsubscribe_button,
            parse_mode="HTML",
        )
    else:
        await callback_query.message.answer(
            text=await course_details(course), reply_markup=unsubscribe_button, parse_mode="HTML"
        )


@router.callback_query(CourseQuestionCallback.filter())
async def start_course_question(
    callback_query: types.CallbackQuery,
    callback_data: CourseQuestionCallback,
    state: FSMContext,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –∫—É—Ä—Å–µ".
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ –≤–æ–ø—Ä–æ—Å.
    """
    await state.update_data(course_id=callback_data.course_id)
    await state.set_state(CourseRequest.question)
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –∫—É—Ä—Å—É.")


@router.message(CourseRequest.question)
async def handle_course_question(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Gemini API —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–µ.
    """
    user_data = await state.get_data()
    course_id = user_data.get("course_id")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
    course = await api_service.get_course(course_id=course_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini API
    response = await gemini_client.generate_content(question=message.text, course=course)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(response.candidates[0].content.parts[0].text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gemini

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
